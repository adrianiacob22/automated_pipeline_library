pipeline {

agent {
    label 'cmschef1'
}

 stages{
     stage ('Cleanup the workspace') {
            steps {
                      cleanWs deleteDirs: true, notFailBuild: true
            }
     }
     stage('Checkout GitHub'){
         steps{
             checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], gitTool: 'Default', submoduleCfg: [], userRemoteConfigs: [[credentialsId: '7b53ce05-7f6d-4724-8f00-92e68a2dd83f', url: 'git@github.ibm.com:CMS/jenkins-infra-config.git']]])
         }

     }
    stage('Running Playbook') {
        steps {
            wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
            ansiblePlaybook extras: "-e 'host=cmschef1 ${verbosity} private_key=$private_key keylength=$keylength keyalg=$keyalg common_name=$common_name digest=$digest country=$country state=$state city=$city org=$org ou=$ou email=$email' ", inventory: 'playbooks/hardening/hosts', playbook: 'playbooks/certificate_generator/certificate_generator.yml', colorized: true
            }
		}
	}
	stage('Create p12 keystore'){
       steps {
           sh 'cd /home/jenkins/certs/ && openssl pkcs12 -inkey "${private_key}".key -in "${private_key}".cer -export -out "${private_key}".p12 -passout pass: ; cd -'
       }
    }
	stage('Copy certificates') {
        steps {
            sh 'tar -czvf "${private_key}".tar.gz /home/jenkins/certs/"${private_key}".* '
        }
  }
	stage('Archiving artifacts') {
	    steps {
	        archiveArtifacts  '**/*.tar.gz'
	        }


	    }
	}
}
